generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id               String    @id @unique @default(cuid())
  name             String
  email            String    @unique
  password         String?
  emailVerified    DateTime?
  isBlocked        Boolean   @default(false)
  isAdmin          Boolean   @default(false)
  image            String    @default("")
  lastLoginTime    DateTime?
  registrationTime DateTime  @default(now())
  accounts         Account[]
  reviews          Review[]
  likes            Like[]
  comments         Comment[]
  Rate             Rate[]
}

model ReviewGroup {
  value   String   @id @unique
  reviews Review[]

  @@fulltext([value])
}

model Review {
  id         String      @id @default(cuid())
  title      String
  piece      Piece?      @relation(fields: [pieceValue], references: [value])
  pieceValue String
  group      ReviewGroup @relation(fields: [groupValue], references: [value])
  groupValue String
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String
  text       String      @db.Text
  grade      Int
  createdAt  DateTime    @default(now()) @db.Timestamp(0)
  images     Image[]
  tags       Tag[]
  likes      Like[]
  comments   Comment[]
  rates      Rate[]

  @@index([authorId])
  @@index([groupValue])
  @@index([pieceValue])
  @@fulltext([title, text])
}

model Tag {
  value   String   @id @unique
  reviews Review[]

  @@fulltext([value])
}

model Image {
  id       String @id @default(cuid())
  url      String @unique
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@index([reviewId])
}

model Like {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Rate {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String
  value    Int

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@index([reviewId])
  @@index([authorId])
  @@fulltext([text])
}

model Piece {
  value   String   @id @unique
  reviews Review[]

  @@fulltext([value])
}
