generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id               String    @id @unique @default(cuid())
  name             String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?
  isBlocked        Boolean   @default(false)
  isAdmin          Boolean   @default(false)
  image            String?
  lastLoginTime    DateTime?
  registrationTime DateTime? @default(now())
  accounts         Account[]
  reviews          Review[]
  Like             Like[]
  Comment          Comment[]
}

model ReviewGroup {
  id   String @id @default(cuid())
  name String @unique

  reviews Review[]
}

model Review {
  id        String      @id @default(cuid())
  title     String
  item      String
  group     ReviewGroup @relation(fields: [reviewGroupId], references: [id])
  text      String
  grade     Int
  createdAt DateTime    @default(now()) @db.Timestamp(0)

  images Image[]
  tags   Tag[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes         Like[]
  comments      Comment[]
  reviewGroupId String

  @@index([authorId])
  @@index([reviewGroupId])
}

model Tag {
  value   String   @id @unique
  label   String   @unique
  reviews Review[]
}

model Image {
  id       String @id @default(cuid())
  url      String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@index([reviewId])
}

model Like {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Comment {
  id       String @id @default(cuid())
  text     String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now()) @db.Timestamp(0)

  @@index([reviewId])
  @@index([authorId])
}

// Piece entity (optional)
// model Piece {
//   id        Int       @id @default(autoincrement())
//   name      String
//   // Add other fields related to the piece as needed
//   reviews   Review[]  // One-to-many relationship with reviews
// }
