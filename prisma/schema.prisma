generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ReviewGroup {
  Movies
  Books
  Games
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?
  isBlocked        Boolean   @default(false)
  isAdmin          Boolean   @default(false)
  image            String?
  lastLoginTime    DateTime?
  registrationTime DateTime? @default(now())
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Review {
//   id        String      @id @default(uuid())
//   title     String
//   item      String
//   group     ReviewGroup
//   tags      Tag[]
//   text      String
//   grade     Int
//   createdAt DateTime    @default(now()) @db.Timestamp(0)

//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String

//   likes    Like[]
//   comments Comment[]

//   @@index([authorId])
// }

// model Tag {
//   id      String   @id @default(uuid())
//   name    String   @unique
//   reviews Review[]
// }

// model Like {
//   id       Int    @id @default(autoincrement())
//   user     User   @relation(fields: [userId], references: [id])
//   userId   String
//   review   Review @relation(fields: [reviewId], references: [id])
//   reviewId String

//   @@index([userId])
//   @@index([reviewId])
// }

// model Comment {
//   id       String @id @default(uuid())
//   text     String
//   review   Review @relation(fields: [reviewId], references: [id])
//   reviewId String
//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String

//   createdAt DateTime @default(now()) @db.Timestamp(0)

//   @@index([reviewId])
//   @@index([authorId])
// }

// Piece entity (optional)
// model Piece {
//   id        Int       @id @default(autoincrement())
//   name      String
//   // Add other fields related to the piece as needed
//   reviews   Review[]  // One-to-many relationship with reviews
// }
